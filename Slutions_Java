#2. Add Two Numbers
You are given two linked lists representing two non-negative numbers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Tag : LinkedList Math

**********************Code**********************
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null){
            return null;
        }else if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }else{
            int len1 = 0;
            int len2 = 0;
            ListNode tmp1 = l1;
            ListNode tmp2 = l2;
            ListNode tmp = null;
            while(tmp1 != null){
                len1++;
                tmp1 = tmp1.next;
            }
            while(tmp2 != null){
                len2++;
                tmp2 = tmp2.next;
            }
            if(len2 > len1){
                tmp = l1;
                l1 = l2;
                l2 = tmp;
            }
            int jw = 0;
            int sum = 0;
            ListNode res = l1;
            ListNode oldTail = null;
            while(l2 != null){
                sum = l2.val + l1.val + jw;
                if(sum < 10){
                    if(l1.next == null){
                        oldTail = l1;
                    }
                    l1.val = sum;
                    l1 = l1.next;
                    l2 = l2.next;
                    jw = 0;
                    
                }else{
                    if(l1.next == null){
                        oldTail = l1;
                    }
                    l1.val = sum - 10;
                    jw = 1;
                    l1 = l1.next;
                    l2 = l2.next;
                }
            }
            while(l1 != null){
                sum = l1.val + jw;
                if(sum < 10){
                    if(l1.next == null){
                        oldTail = l1;
                    }
                    l1.val = sum;
                    l1 = l1.next;
                    jw = 0;
                }else{
                    if(l1.next == null){
                        oldTail = l1;
                    }
                    l1.val = sum - 10;
                    jw = 1;
                    l1 = l1.next;
                }
            }
            if(jw == 1){
                ListNode lastNode = new ListNode(1);
                oldTail.next = lastNode;
            }
            return res;
        }
    }
}
